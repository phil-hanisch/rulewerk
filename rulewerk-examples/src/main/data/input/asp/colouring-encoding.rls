!ASP

colour(red) .
colour(blue) .

vertex(1) .
vertex(2) .
vertex(3) .
vertex(4) .
vertex(5) .

edge(1,2) .
edge(2,3) .
edge(3,4) .
edge(4,5) .
edge(5,1) .

% achieved: equality predicate for colours
equal(?X, ?X) :- colour(?X) .

{ coloured(?X, ?C) : colour(?C); colored(?X, ?D) : colour(?D) } :- vertex(?X) .
% coloured(?X, blue), coloured(?X, red) :- vertex(?X) .
% coloured(?X, blue) :- vertex(?X) .
% achieved: every vertex is coloured

fail(?X) :- coloured(?X, ?C1), coloured(?X, ?C2), ~equal(?C1, ?C2) .
% achieved: every vertex has only one colour

fail(?X, ?Y) :- edge(?X,?Y), coloured(?X, ?C), coloured(?Y, ?C) .
% achieved: vertices that are neighbours do not have the same colour
